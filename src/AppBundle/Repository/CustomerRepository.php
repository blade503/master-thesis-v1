<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Customer;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManager $entityManager)
    {
        parent::__construct($entityManager, new ClassMetadata(Customer::class));
    }

    /**
     * @param $input
     * @return Customer
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function createCustomer($input, $api)
    {
        $customer = null;
        if ($api == 'GRAPHQL') {
            $customer = new Customer($input['firstName'],  $input['lastName'], $input['city'], $input['country'], $input['socialSecurityNumber'], $input['mobile']);
        } else {
            $customer = new Customer($input->get('firstName'),  $input->get('lastName'), $input->get('city'), $input->get('country'), $input->get('socialSecurityNumber'), $input->get('mobile'));
        }

        $this->getEntityManager()->persist($customer);
        $this->getEntityManager()->flush();

        return $customer;
    }

    /**
     * @param $id
     * @param $input
     * @return null|object
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function editCustomer($id, $input)
    {
        $customer = $this->find($id);
        $this->updateCustomerData($customer, $input);
        $this->getEntityManager()->flush();
        return $customer;
    }

    /**
     * @param $id
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deleteCustomer($id) {
        $customer = $this->find($id);
        if ($customer) {
            $this->getEntityManager()->remove($customer);
            $this->getEntityManager()->flush();
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param $customer
     * @param $input
     */
    public function updateCustomerData($customer, $input) {
        $customerFields = array('firstName', 'lastName', 'city', 'country', 'socialSecurityNumber', 'mobile', 'salary');
        foreach ($customerFields as $item) {
            if(isset($input[$item])) {
                $setter = 'set'.ucfirst($item);
                $customer->$setter($input[$item]);
            }
        }
    }
}
